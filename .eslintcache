[{"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\index.tsx":"1","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\reportWebVitals.ts":"2","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Food\\Food.tsx":"3","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\ApiClient.js":"4","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular\\DefaultApi.js":"5","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject13.js":"6","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject11.js":"7","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject14.js":"8","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject10.js":"9","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject12.js":"10","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject9.js":"11","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject15.js":"12","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Main\\Main.tsx":"13","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\App.tsx":"14","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Stores\\FoodStore.ts":"15","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\Page\\Page.tsx":"16"},{"size":498,"mtime":1607143250734,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":690,"mtime":1606981677146,"results":"20","hashOfConfig":"18"},{"size":24268,"mtime":1607396568785,"results":"21","hashOfConfig":"18"},{"size":190531,"mtime":1607396277217,"results":"22","hashOfConfig":"18"},{"size":4381,"mtime":1606948667735,"results":"23","hashOfConfig":"18"},{"size":3527,"mtime":1606948667710,"results":"24","hashOfConfig":"18"},{"size":3527,"mtime":1606948667748,"results":"25","hashOfConfig":"18"},{"size":3899,"mtime":1606948667677,"results":"26","hashOfConfig":"18"},{"size":3856,"mtime":1606948667724,"results":"27","hashOfConfig":"18"},{"size":3131,"mtime":1606948667845,"results":"28","hashOfConfig":"18"},{"size":3856,"mtime":1606948667759,"results":"29","hashOfConfig":"18"},{"size":1308,"mtime":1608081865203,"results":"30","hashOfConfig":"18"},{"size":1394,"mtime":1607388124612,"results":"31","hashOfConfig":"18"},{"size":313,"mtime":1608080411060,"results":"32","hashOfConfig":"18"},{"size":969,"mtime":1608080485823,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1l6yn9u",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\index.tsx",[],["71","72"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\reportWebVitals.ts",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Food\\Food.tsx",[],["73","74"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\ApiClient.js",["75","76","77","78","79","80"],"/**\n * spoonacular API\n * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \\\"gluten free brownies without sugar\\\" or \\\"low fat vegan cupcakes.\\\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.\n *\n * The version of the OpenAPI document: 1.0\n * Contact: david@spoonacular.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n\n/**\n* @module com.spoonacular.client/ApiClient\n* @version 1.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:com.spoonacular.client/ApiClient\n* @class\n*/\nclass ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://api.spoonacular.com\n         */\n        this.basePath = 'https://api.spoonacular.com'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n            'apiKeyScheme': {type: 'apiKey', 'in': 'query', name: 'apiKey', apiKey: process.env.REACT_APP_API_KEY}\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:com.spoonacular.client/ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n   /**\n    * Callback function to receive the result of the operation.\n    * @callback module:com.spoonacular.client/ApiClient~callApiCallback\n    * @param {String} error Error message, if any.\n    * @param data The data returned by the service call.\n    * @param {String} response The complete HTTP response.\n    */\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one \n    * @param {module:com.spoonacular.client/ApiClient~callApiCallback} callback The callback function.\n    * @returns {Object} The SuperAgent request object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath, callback) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        \n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n        request.end((error, response) => {\n            if (callback) {\n                var data = null;\n                if (!error) {\n                    try {\n                        data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n                    } catch (err) {\n                        error = err;\n                    }\n                }\n\n                callback(error, data, response);\n            }\n        });\n\n        return request;\n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"https://api.spoonacular.com\",\n              'description': \"No description provided\",\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                let variable = server['variables'][variable_name];\n                if ( !('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name]) ) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:com.spoonacular.client/ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n",["81","82"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular\\DefaultApi.js",["83","84","85","86","87","88","89"],"/**\n * spoonacular API\n * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \\\"gluten free brownies without sugar\\\" or \\\"low fat vegan cupcakes.\\\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.\n *\n * The version of the OpenAPI document: 1.0\n * Contact: david@spoonacular.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport InlineObject10 from '../com.spoonacular.client.model/InlineObject10';\nimport InlineObject11 from '../com.spoonacular.client.model/InlineObject11';\nimport InlineObject12 from '../com.spoonacular.client.model/InlineObject12';\nimport InlineObject13 from '../com.spoonacular.client.model/InlineObject13';\nimport InlineObject14 from '../com.spoonacular.client.model/InlineObject14';\nimport InlineObject15 from '../com.spoonacular.client.model/InlineObject15';\nimport InlineObject9 from '../com.spoonacular.client.model/InlineObject9';\n\n/**\n* Default service.\n* @module com.spoonacular.client/com.spoonacular/DefaultApi\n* @version 1.0\n*/\nexport default class DefaultApi {\n\n    /**\n    * Constructs a new DefaultApi. \n    * @alias module:com.spoonacular.client/com.spoonacular/DefaultApi\n    * @class\n    * @param {module:com.spoonacular.client/ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:com.spoonacular.client/ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n    /**\n     * Callback function to receive the result of the addToMealPlan operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~addToMealPlanCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Add to Meal Plan\n     * Add an item to the user's meal plan.\n     * @param {String} username The username.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject11} inlineObject11 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~addToMealPlanCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    addToMealPlan(username, hash, inlineObject11, callback) {\n      let postBody = inlineObject11;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling addToMealPlan\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling addToMealPlan\");\n      }\n      // verify the required parameter 'inlineObject11' is set\n      if (inlineObject11 === undefined || inlineObject11 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject11' when calling addToMealPlan\");\n      }\n\n      let pathParams = {\n        'username': username\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/items', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the addToShoppingList operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~addToShoppingListCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Add to Shopping List\n     * Add an item to the current shopping list of a user.\n     * @param {String} username The username.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject14} inlineObject14 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~addToShoppingListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    addToShoppingList(username, hash, inlineObject14, callback) {\n      let postBody = inlineObject14;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling addToShoppingList\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling addToShoppingList\");\n      }\n      // verify the required parameter 'inlineObject14' is set\n      if (inlineObject14 === undefined || inlineObject14 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject14' when calling addToShoppingList\");\n      }\n\n      let pathParams = {\n        'username': username\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/shopping-list/items', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the analyzeARecipeSearchQuery operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeARecipeSearchQueryCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Analyze a Recipe Search Query\n     * Parse a recipe search query to find out its intention.\n     * @param {String} q The recipe search query.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeARecipeSearchQueryCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    analyzeARecipeSearchQuery(q, callback) {\n      let postBody = null;\n      // verify the required parameter 'q' is set\n      if (q === undefined || q === null) {\n        throw new Error(\"Missing the required parameter 'q' when calling analyzeARecipeSearchQuery\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'q': q\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/queries/analyze', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the analyzeRecipeInstructions operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeRecipeInstructionsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Analyze Recipe Instructions\n     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.\n     * @param {String} instructions The instructions to be analyzed.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    analyzeRecipeInstructions(instructions, callback) {\n      let postBody = null;\n      // verify the required parameter 'instructions' is set\n      if (instructions === undefined || instructions === null) {\n        throw new Error(\"Missing the required parameter 'instructions' when calling analyzeRecipeInstructions\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'instructions': instructions\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/analyzeInstructions', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the autocompleteIngredientSearch operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteIngredientSearchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Autocomplete Ingredient Search\n     * Autocomplete the entry of an ingredient.\n     * @param {String} query The partial or full ingredient name.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of results to return (between 1 and 100).\n     * @param {Boolean} opts.metaInformation Whether to return more meta information about the ingredients.\n     * @param {String} opts.intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteIngredientSearchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    autocompleteIngredientSearch(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling autocompleteIngredientSearch\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'number': opts['_number'],\n        'metaInformation': opts['metaInformation'],\n        'intolerances': opts['intolerances']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/autocomplete', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the autocompleteMenuItemSearch operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteMenuItemSearchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Autocomplete Menu Item Search\n     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.\n     * @param {String} query The (partial) search query.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of results to return (between 1 and 25).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteMenuItemSearchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    autocompleteMenuItemSearch(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling autocompleteMenuItemSearch\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/menuItems/suggest', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the autocompleteProductSearch operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteProductSearchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Autocomplete Product Search\n     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.\n     * @param {String} query The (partial) search query.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of results to return (between 1 and 25).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteProductSearchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    autocompleteProductSearch(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling autocompleteProductSearch\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/suggest', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the autocompleteRecipeSearch operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteRecipeSearchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Autocomplete Recipe Search\n     * Autocomplete a partial input to suggest possible recipe names.\n     * @param {String} query The query to be autocompleted.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of results to return (between 1 and 25).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteRecipeSearchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    autocompleteRecipeSearch(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling autocompleteRecipeSearch\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/autocomplete', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the classifyCuisine operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyCuisineCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Classify Cuisine\n     * Classify the recipe's cuisine.\n     * @param {String} title The title of the recipe.\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\\\\\n).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyCuisineCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    classifyCuisine(title, ingredientList, callback) {\n      let postBody = null;\n      // verify the required parameter 'title' is set\n      if (title === undefined || title === null) {\n        throw new Error(\"Missing the required parameter 'title' when calling classifyCuisine\");\n      }\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling classifyCuisine\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'title': title,\n        'ingredientList': ingredientList\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/cuisine', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the classifyGroceryProduct operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Classify Grocery Product\n     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject9} inlineObject9 \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    classifyGroceryProduct(inlineObject9, opts, callback) {\n      opts = opts || {};\n      let postBody = inlineObject9;\n      // verify the required parameter 'inlineObject9' is set\n      if (inlineObject9 === undefined || inlineObject9 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject9' when calling classifyGroceryProduct\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'locale': opts['locale']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/classify', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the classifyGroceryProductBulk operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductBulkCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Classify Grocery Product Bulk\n     * Provide a set of product jsons, get back classified products.\n     * @param {Object} body \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductBulkCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    classifyGroceryProductBulk(body, opts, callback) {\n      opts = opts || {};\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling classifyGroceryProductBulk\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'locale': opts['locale']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/classifyBatch', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the clearMealPlanDay operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~clearMealPlanDayCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Clear Meal Plan Day\n     * Delete all planned items from the user's meal plan for a specific day.\n     * @param {String} username The username.\n     * @param {String} _date The date in the format yyyy-mm-dd.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject10} inlineObject10 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~clearMealPlanDayCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    clearMealPlanDay(username, _date, hash, inlineObject10, callback) {\n      let postBody = inlineObject10;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling clearMealPlanDay\");\n      }\n      // verify the required parameter '_date' is set\n      if (_date === undefined || _date === null) {\n        throw new Error(\"Missing the required parameter '_date' when calling clearMealPlanDay\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling clearMealPlanDay\");\n      }\n      // verify the required parameter 'inlineObject10' is set\n      if (inlineObject10 === undefined || inlineObject10 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject10' when calling clearMealPlanDay\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'date': _date\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/day/{date}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the computeGlycemicLoad operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~computeGlycemicLoadCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Compute Glycemic Load\n     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.\n     * @param {Object} body \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~computeGlycemicLoadCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    computeGlycemicLoad(body, callback) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling computeGlycemicLoad\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/glycemicLoad', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the connectUser operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~connectUserCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Connect User\n     * In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.\n     * @param {Object} body \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~connectUserCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    connectUser(body, callback) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling connectUser\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/users/connect', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the convertAmounts operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~convertAmountsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Convert Amounts\n     * Convert amounts like \\\"2 cups of flour to grams\\\".\n     * @param {String} ingredientName The ingredient which you want to convert.\n     * @param {Number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \\\"2.5 cups of flour to grams\\\".\n     * @param {String} sourceUnit The unit from which you want to convert, e.g. the grams in \\\"2.5 cups of flour to grams\\\". You can also use \\\"piece\\\", e.g. \\\"3.4 oz tomatoes to piece\\\"\n     * @param {String} targetUnit The unit to which you want to convert, e.g. the grams in \\\"2.5 cups of flour to grams\\\". You can also use \\\"piece\\\", e.g. \\\"3.4 oz tomatoes to piece\\\"\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~convertAmountsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, callback) {\n      let postBody = null;\n      // verify the required parameter 'ingredientName' is set\n      if (ingredientName === undefined || ingredientName === null) {\n        throw new Error(\"Missing the required parameter 'ingredientName' when calling convertAmounts\");\n      }\n      // verify the required parameter 'sourceAmount' is set\n      if (sourceAmount === undefined || sourceAmount === null) {\n        throw new Error(\"Missing the required parameter 'sourceAmount' when calling convertAmounts\");\n      }\n      // verify the required parameter 'sourceUnit' is set\n      if (sourceUnit === undefined || sourceUnit === null) {\n        throw new Error(\"Missing the required parameter 'sourceUnit' when calling convertAmounts\");\n      }\n      // verify the required parameter 'targetUnit' is set\n      if (targetUnit === undefined || targetUnit === null) {\n        throw new Error(\"Missing the required parameter 'targetUnit' when calling convertAmounts\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'ingredientName': ingredientName,\n        'sourceAmount': sourceAmount,\n        'sourceUnit': sourceUnit,\n        'targetUnit': targetUnit\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/convert', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the createRecipeCard operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~createRecipeCardCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Create Recipe Card\n     * Generate a recipe card for a recipe.\n     * @param {String} title The title of the recipe.\n     * @param {File} image The binary image of the recipe as jpg.\n     * @param {String} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\\\\\n).\n     * @param {String} instructions The instructions to make the recipe. One step per line (separate lines with \\\\\\\\n).\n     * @param {Number} readyInMinutes The number of minutes it takes to get the recipe on the table.\n     * @param {Number} servings The number of servings the recipe makes.\n     * @param {String} mask The mask to put over the recipe image (\\\\\\\"ellipseMask\\\\\\\", \\\\\\\"diamondMask\\\\\\\", \\\\\\\"starMask\\\\\\\", \\\\\\\"heartMask\\\\\\\", \\\\\\\"potMask\\\\\\\", \\\\\\\"fishMask\\\\\\\").\n     * @param {String} backgroundImage The background image (\\\\\\\"none\\\\\\\",\\\\\\\"background1\\\\\\\", or \\\\\\\"background2\\\\\\\").\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.author The author of the recipe.\n     * @param {String} opts.backgroundColor The background color for the recipe card as a hex-string.\n     * @param {String} opts.fontColor The font color for the recipe card as a hex-string.\n     * @param {String} opts.source The source of the recipe.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~createRecipeCardCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'title' is set\n      if (title === undefined || title === null) {\n        throw new Error(\"Missing the required parameter 'title' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'image' is set\n      if (image === undefined || image === null) {\n        throw new Error(\"Missing the required parameter 'image' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'ingredients' is set\n      if (ingredients === undefined || ingredients === null) {\n        throw new Error(\"Missing the required parameter 'ingredients' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'instructions' is set\n      if (instructions === undefined || instructions === null) {\n        throw new Error(\"Missing the required parameter 'instructions' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'readyInMinutes' is set\n      if (readyInMinutes === undefined || readyInMinutes === null) {\n        throw new Error(\"Missing the required parameter 'readyInMinutes' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'servings' is set\n      if (servings === undefined || servings === null) {\n        throw new Error(\"Missing the required parameter 'servings' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'mask' is set\n      if (mask === undefined || mask === null) {\n        throw new Error(\"Missing the required parameter 'mask' when calling createRecipeCard\");\n      }\n      // verify the required parameter 'backgroundImage' is set\n      if (backgroundImage === undefined || backgroundImage === null) {\n        throw new Error(\"Missing the required parameter 'backgroundImage' when calling createRecipeCard\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'title': title,\n        'image': image,\n        'ingredients': ingredients,\n        'instructions': instructions,\n        'readyInMinutes': readyInMinutes,\n        'servings': servings,\n        'mask': mask,\n        'backgroundImage': backgroundImage,\n        'author': opts['author'],\n        'backgroundColor': opts['backgroundColor'],\n        'fontColor': opts['fontColor'],\n        'source': opts['source']\n      };\n\n      let authNames = [];\n      let contentTypes = ['multipart/form-data'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/visualizeRecipe', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the deleteFromMealPlan operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~deleteFromMealPlanCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Delete from Meal Plan\n     * Delete an item from the user's meal plan.\n     * @param {String} username The username.\n     * @param {Number} id The shopping list item id.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject12} inlineObject12 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~deleteFromMealPlanCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    deleteFromMealPlan(username, id, hash, inlineObject12, callback) {\n      let postBody = inlineObject12;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling deleteFromMealPlan\");\n      }\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling deleteFromMealPlan\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling deleteFromMealPlan\");\n      }\n      // verify the required parameter 'inlineObject12' is set\n      if (inlineObject12 === undefined || inlineObject12 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject12' when calling deleteFromMealPlan\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'id': id\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/items/{id}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the deleteFromShoppingList operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~deleteFromShoppingListCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Delete from Shopping List\n     * Delete an item from the current shopping list of the user.\n     * @param {String} username The username.\n     * @param {Number} id The shopping list item id.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject15} inlineObject15 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~deleteFromShoppingListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    deleteFromShoppingList(username, id, hash, inlineObject15, callback) {\n      let postBody = inlineObject15;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling deleteFromShoppingList\");\n      }\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling deleteFromShoppingList\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling deleteFromShoppingList\");\n      }\n      // verify the required parameter 'inlineObject15' is set\n      if (inlineObject15 === undefined || inlineObject15 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject15' when calling deleteFromShoppingList\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'id': id\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/shopping-list/items/{id}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the detectFoodInText operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~detectFoodInTextCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Detect Food in Text\n     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.\n     * @param {String} text The text in which food items, such as dish names and ingredients, should be detected in.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~detectFoodInTextCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    detectFoodInText(text, callback) {\n      let postBody = null;\n      // verify the required parameter 'text' is set\n      if (text === undefined || text === null) {\n        throw new Error(\"Missing the required parameter 'text' when calling detectFoodInText\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'text': text\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/detect', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the extractRecipeFromWebsite operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~extractRecipeFromWebsiteCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Extract Recipe from Website\n     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.\n     * @param {String} url The URL of the recipe page.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.\n     * @param {Boolean} opts.analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~extractRecipeFromWebsiteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    extractRecipeFromWebsite(url, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'url' is set\n      if (url === undefined || url === null) {\n        throw new Error(\"Missing the required parameter 'url' when calling extractRecipeFromWebsite\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'url': url,\n        'forceExtraction': opts['forceExtraction'],\n        'analyze': opts['analyze']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/extract', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the generateMealPlan operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~generateMealPlanCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Generate Meal Plan\n     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.timeFrame Either for one \\\"day\\\" or an entire \\\"week\\\".\n     * @param {Number} opts.targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.\n     * @param {String} opts.diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.\n     * @param {String} opts.exclude A comma-separated list of allergens or ingredients that must be excluded.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~generateMealPlanCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    generateMealPlan(opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'timeFrame': opts['timeFrame'],\n        'targetCalories': opts['targetCalories'],\n        'diet': opts['diet'],\n        'exclude': opts['exclude']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/generate', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the generateShoppingList operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~generateShoppingListCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Generate Shopping List\n     * Generate the shopping list for a user from the meal planner in a given time frame.\n     * @param {String} username The username.\n     * @param {String} startDate The start date in the format yyyy-mm-dd.\n     * @param {String} endDate The end date in the format yyyy-mm-dd.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject13} inlineObject13 \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~generateShoppingListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    generateShoppingList(username, startDate, endDate, hash, inlineObject13, callback) {\n      let postBody = inlineObject13;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling generateShoppingList\");\n      }\n      // verify the required parameter 'startDate' is set\n      if (startDate === undefined || startDate === null) {\n        throw new Error(\"Missing the required parameter 'startDate' when calling generateShoppingList\");\n      }\n      // verify the required parameter 'endDate' is set\n      if (endDate === undefined || endDate === null) {\n        throw new Error(\"Missing the required parameter 'endDate' when calling generateShoppingList\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling generateShoppingList\");\n      }\n      // verify the required parameter 'inlineObject13' is set\n      if (inlineObject13 === undefined || inlineObject13 === null) {\n        throw new Error(\"Missing the required parameter 'inlineObject13' when calling generateShoppingList\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'start-date': startDate,\n        'end-date': endDate\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [''];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/shopping-list/{start-date}/{end-date}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getARandomFoodJoke operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getARandomFoodJokeCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get a Random Food Joke\n     * Get a random joke that is related to food. Caution: this is an endpoint for adults!\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getARandomFoodJokeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getARandomFoodJoke(callback) {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [\"apiKeyScheme\"];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/jokes/random', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getAnalyzedRecipeInstructions operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getAnalyzedRecipeInstructionsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Analyzed Recipe Instructions\n     * Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.\n     * @param {Number} id The recipe id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.stepBreakdown Whether to break down the recipe steps even more.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getAnalyzedRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getAnalyzedRecipeInstructions(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'stepBreakdown': opts['stepBreakdown']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/analyzedInstructions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getComparableProducts operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getComparableProductsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Comparable Products\n     * Find comparable products to the given one.\n     * @param {Number} upc The UPC of the product for which you want to find comparable products.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getComparableProductsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getComparableProducts(upc, callback) {\n      let postBody = null;\n      // verify the required parameter 'upc' is set\n      if (upc === undefined || upc === null) {\n        throw new Error(\"Missing the required parameter 'upc' when calling getComparableProducts\");\n      }\n\n      let pathParams = {\n        'upc': upc\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/upc/{upc}/comparable', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getConversationSuggests operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getConversationSuggestsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Conversation Suggests\n     * This endpoint returns suggestions for things the user can say or ask the chatbot.\n     * @param {String} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of suggestions to return (between 1 and 25).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getConversationSuggestsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getConversationSuggests(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling getConversationSuggests\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/converse/suggest', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getDishPairingForWine operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getDishPairingForWineCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Dish Pairing for Wine\n     * Find a dish that goes well with a given wine.\n     * @param {String} wine The type of wine that should be paired, e.g. \\\"merlot\\\", \\\"riesling\\\", or \\\"malbec\\\".\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getDishPairingForWineCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getDishPairingForWine(wine, callback) {\n      let postBody = null;\n      // verify the required parameter 'wine' is set\n      if (wine === undefined || wine === null) {\n        throw new Error(\"Missing the required parameter 'wine' when calling getDishPairingForWine\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'wine': wine\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/wine/dishes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getIngredientInformation operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientInformationCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Ingredient Information\n     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.\n     * @param {Number} id The ingredient id.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.amount The amount of this ingredient.\n     * @param {String} opts.unit The unit for the given amount.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientInformationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getIngredientInformation(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getIngredientInformation\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'amount': opts['amount'],\n        'unit': opts['unit']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/{id}/information', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getIngredientSubstitutes operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Ingredient Substitutes\n     * Search for substitutes for a given ingredient.\n     * @param {String} ingredientName The name of the ingredient you want to replace.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getIngredientSubstitutes(ingredientName, callback) {\n      let postBody = null;\n      // verify the required parameter 'ingredientName' is set\n      if (ingredientName === undefined || ingredientName === null) {\n        throw new Error(\"Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'ingredientName': ingredientName\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/substitutes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getIngredientSubstitutesByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Ingredient Substitutes by ID\n     * Search for substitutes for a given ingredient.\n     * @param {Number} id The id of the ingredient you want substitutes for.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getIngredientSubstitutesByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getIngredientSubstitutesByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/{id}/substitutes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMealPlanTemplate operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanTemplateCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Meal Plan Template\n     * Get information about a meal plan template.\n     * @param {String} username The username.\n     * @param {Number} id The shopping list item id.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanTemplateCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getMealPlanTemplate(username, id, hash, callback) {\n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling getMealPlanTemplate\");\n      }\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getMealPlanTemplate\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getMealPlanTemplate\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'id': id\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/templates/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMealPlanTemplates operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanTemplatesCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Meal Plan Templates\n     * Get meal plan templates from user or public ones.\n     * @param {String} username The username.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanTemplatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getMealPlanTemplates(username, hash, callback) {\n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling getMealPlanTemplates\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getMealPlanTemplates\");\n      }\n\n      let pathParams = {\n        'username': username\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/templates', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMealPlanWeek operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanWeekCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Meal Plan Week\n     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.\n     * @param {String} username The username.\n     * @param {String} startDate The start date of the meal planned week in the format yyyy-mm-dd.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getMealPlanWeekCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getMealPlanWeek(username, startDate, hash, callback) {\n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling getMealPlanWeek\");\n      }\n      // verify the required parameter 'startDate' is set\n      if (startDate === undefined || startDate === null) {\n        throw new Error(\"Missing the required parameter 'startDate' when calling getMealPlanWeek\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getMealPlanWeek\");\n      }\n\n      let pathParams = {\n        'username': username,\n        'start-date': startDate\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/week/{start-date}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getMenuItemInformation operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getMenuItemInformationCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Menu Item Information\n     * Use a menu item id to get all available information about a menu item, such as nutrition.\n     * @param {Number} id The menu item id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getMenuItemInformationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getMenuItemInformation(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getMenuItemInformation\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/menuItems/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getProductInformation operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getProductInformationCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Product Information\n     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.\n     * @param {Number} id The id of the packaged food.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getProductInformationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getProductInformation(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getProductInformation\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/{id}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRandomFoodTrivia operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomFoodTriviaCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Random Food Trivia\n     * Returns random food trivia.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomFoodTriviaCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRandomFoodTrivia(callback) {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/trivia/random', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRandomRecipes operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomRecipesCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Random Recipes\n     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows display with proper attribution.\n     * @param {String} opts.tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.\n     * @param {Number} opts._number The number of random recipes to be returned (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomRecipesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRandomRecipes(opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'limitLicense': opts['limitLicense'],\n        'tags': opts['tags'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [\"apiKeyScheme\"];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/random', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeEquipmentByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeEquipmentByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Equipment by ID\n     * Get a recipe's equipment list.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeEquipmentByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipeEquipmentByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/equipmentWidget.json', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeInformation operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Information\n     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.\n     * @param {Number} id The id of the recipe.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeInformation(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipeInformation\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'includeNutrition': opts['includeNutrition']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/information', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeInformationBulk operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationBulkCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Information Bulk\n     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.\n     * @param {String} ids A comma-separated list of recipe ids.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationBulkCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeInformationBulk(ids, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ids' is set\n      if (ids === undefined || ids === null) {\n        throw new Error(\"Missing the required parameter 'ids' when calling getRecipeInformationBulk\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'ids': ids,\n        'includeNutrition': opts['includeNutrition']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/informationBulk', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeIngredientsByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeIngredientsByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Ingredients by ID\n     * Get a recipe's ingredient list.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeIngredientsByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipeIngredientsByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/ingredientWidget.json', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeNutritionWidgetByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeNutritionWidgetByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Nutrition Widget by ID\n     * Get a recipe's nutrition widget data.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeNutritionWidgetByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeNutritionWidgetByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipeNutritionWidgetByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/nutritionWidget.json', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipePriceBreakdownByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipePriceBreakdownByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Price Breakdown by ID\n     * Get a recipe's price breakdown data.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipePriceBreakdownByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipePriceBreakdownByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/priceBreakdownWidget.json', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getRecipeTasteByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeTasteByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Recipe Taste by ID\n     * Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeTasteByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getRecipeTasteByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getRecipeTasteByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/tasteWidget.json', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getShoppingList operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getShoppingListCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Shopping List\n     * Get the current shopping list for the given user.\n     * @param {String} username The username.\n     * @param {String} hash The private hash for the username.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getShoppingListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getShoppingList(username, hash, callback) {\n      let postBody = null;\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling getShoppingList\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getShoppingList\");\n      }\n\n      let pathParams = {\n        'username': username\n      };\n      let queryParams = {\n        'hash': hash\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/mealplanner/{username}/shopping-list', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getSimilarRecipes operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getSimilarRecipesCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Similar Recipes\n     * Find recipes which are similar to the given one.\n     * @param {Number} id The id of the source recipe for which similar recipes should be found.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The number of random recipes to be returned (between 1 and 100).\n     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows display with proper attribution.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getSimilarRecipesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getSimilarRecipes(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling getSimilarRecipes\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'number': opts['_number'],\n        'limitLicense': opts['limitLicense']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/similar', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getWineDescription operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineDescriptionCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Wine Description\n     * Get a simple description of a certain wine, e.g. \\\"malbec\\\", \\\"riesling\\\", or \\\"merlot\\\".\n     * @param {String} wine The name of the wine that should be paired, e.g. \\\"merlot\\\", \\\"riesling\\\", or \\\"malbec\\\".\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineDescriptionCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getWineDescription(wine, callback) {\n      let postBody = null;\n      // verify the required parameter 'wine' is set\n      if (wine === undefined || wine === null) {\n        throw new Error(\"Missing the required parameter 'wine' when calling getWineDescription\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'wine': wine\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/wine/description', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getWinePairing operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWinePairingCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Wine Pairing\n     * Find a wine that goes well with a food. Food can be a dish name (\\\"steak\\\"), an ingredient name (\\\"salmon\\\"), or a cuisine (\\\"italian\\\").\n     * @param {String} food The food to get a pairing for. This can be a dish (\\\"steak\\\"), an ingredient (\\\"salmon\\\"), or a cuisine (\\\"italian\\\").\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.maxPrice The maximum price for the specific wine recommendation in USD.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWinePairingCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getWinePairing(food, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'food' is set\n      if (food === undefined || food === null) {\n        throw new Error(\"Missing the required parameter 'food' when calling getWinePairing\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'food': food,\n        'maxPrice': opts['maxPrice']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/wine/pairing', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the getWineRecommendation operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineRecommendationCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get Wine Recommendation\n     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \\\"merlot\\\".\n     * @param {String} wine The type of wine to get a specific product recommendation for.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.maxPrice The maximum price for the specific wine recommendation in USD.\n     * @param {Number} opts.minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.\n     * @param {Number} opts._number The number of wine recommendations expected (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineRecommendationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    getWineRecommendation(wine, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'wine' is set\n      if (wine === undefined || wine === null) {\n        throw new Error(\"Missing the required parameter 'wine' when calling getWineRecommendation\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'wine': wine,\n        'maxPrice': opts['maxPrice'],\n        'minRating': opts['minRating'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/wine/recommendation', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the guessNutritionByDishName operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~guessNutritionByDishNameCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Guess Nutrition by Dish Name\n     * Estimate the macronutrients of a dish based on its title.\n     * @param {String} title The title of the dish.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~guessNutritionByDishNameCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    guessNutritionByDishName(title, callback) {\n      let postBody = null;\n      // verify the required parameter 'title' is set\n      if (title === undefined || title === null) {\n        throw new Error(\"Missing the required parameter 'title' when calling guessNutritionByDishName\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'title': title\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/guessNutrition', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the imageAnalysisByURL operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~imageAnalysisByURLCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Image Analysis by URL\n     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!\n     * @param {String} imageUrl The URL of the image to be analyzed.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~imageAnalysisByURLCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    imageAnalysisByURL(imageUrl, callback) {\n      let postBody = null;\n      // verify the required parameter 'imageUrl' is set\n      if (imageUrl === undefined || imageUrl === null) {\n        throw new Error(\"Missing the required parameter 'imageUrl' when calling imageAnalysisByURL\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'imageUrl': imageUrl\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/images/analyze', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the imageClassificationByURL operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~imageClassificationByURLCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Image Classification by URL\n     * Classify a food image. You can play around with that endpoint!\n     * @param {String} imageUrl The URL of the image to be classified.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~imageClassificationByURLCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    imageClassificationByURL(imageUrl, callback) {\n      let postBody = null;\n      // verify the required parameter 'imageUrl' is set\n      if (imageUrl === undefined || imageUrl === null) {\n        throw new Error(\"Missing the required parameter 'imageUrl' when calling imageClassificationByURL\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'imageUrl': imageUrl\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/images/classify', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the ingredientSearch operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~ingredientSearchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Ingredient Search\n     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).\n     * @param {String} query The partial or full ingredient name.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.addChildren Whether to add children of found foods.\n     * @param {Number} opts.minProteinPercent The minimum percentage of protein the food must have (between 0 and 100).\n     * @param {Number} opts.maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100).\n     * @param {Number} opts.minFatPercent The minimum percentage of fat the food must have (between 0 and 100).\n     * @param {Number} opts.maxFatPercent The maximum percentage of fat the food can have (between 0 and 100).\n     * @param {Number} opts.minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100).\n     * @param {Number} opts.maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100).\n     * @param {Boolean} opts.metaInformation Whether to return more meta information about the ingredients.\n     * @param {String} opts.intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n     * @param {String} opts.sort The strategy to sort recipes by. See a full list of supported sorting options.\n     * @param {String} opts.sortDirection The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).\n     * @param {Number} opts.offset The number of results to skip (between 0 and 990).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~ingredientSearchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    ingredientSearch(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling ingredientSearch\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'addChildren': opts['addChildren'],\n        'minProteinPercent': opts['minProteinPercent'],\n        'maxProteinPercent': opts['maxProteinPercent'],\n        'minFatPercent': opts['minFatPercent'],\n        'maxFatPercent': opts['maxFatPercent'],\n        'minCarbsPercent': opts['minCarbsPercent'],\n        'maxCarbsPercent': opts['maxCarbsPercent'],\n        'metaInformation': opts['metaInformation'],\n        'intolerances': opts['intolerances'],\n        'sort': opts['sort'],\n        'sortDirection': opts['sortDirection'],\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the mapIngredientsToGroceryProducts operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~mapIngredientsToGroceryProductsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Map Ingredients to Grocery Products\n     * Map a set of ingredients to products you can buy in the grocery store.\n     * @param {Object} body \n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~mapIngredientsToGroceryProductsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    mapIngredientsToGroceryProducts(body, callback) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling mapIngredientsToGroceryProducts\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/ingredients/map', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the parseIngredients operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~parseIngredientsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Parse Ingredients\n     * Extract an ingredient from plain text.\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.\n     * @param {Number} servings The number of servings that you can make from the ingredients.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.includeNutrition Whether nutrition data should be added to correctly parsed ingredients.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~parseIngredientsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    parseIngredients(ingredientList, servings, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling parseIngredients\");\n      }\n      // verify the required parameter 'servings' is set\n      if (servings === undefined || servings === null) {\n        throw new Error(\"Missing the required parameter 'servings' when calling parseIngredients\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'ingredientList': ingredientList,\n        'servings': servings,\n        'includeNutrition': opts['includeNutrition']\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/parseIngredients', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the quickAnswer operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~quickAnswerCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Quick Answer\n     * Answer a nutrition related natural language question.\n     * @param {String} q The nutrition related question.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~quickAnswerCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    quickAnswer(q, callback) {\n      let postBody = null;\n      // verify the required parameter 'q' is set\n      if (q === undefined || q === null) {\n        throw new Error(\"Missing the required parameter 'q' when calling quickAnswer\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'q': q\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/quickAnswer', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchAllFood operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchAllFoodCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search All Food\n     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.\n     * @param {String} query The search query.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.offset The number of results to skip (between 0 and 990).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchAllFoodCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchAllFood(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchAllFood\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchCustomFoods operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchCustomFoodsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Custom Foods\n     * Search custom foods in a user's account.\n     * @param {String} query The search query.\n     * @param {String} username The username.\n     * @param {String} hash The private hash for the username.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.offset The number of results to skip (between 0 and 990).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchCustomFoodsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchCustomFoods(query, username, hash, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchCustomFoods\");\n      }\n      // verify the required parameter 'username' is set\n      if (username === undefined || username === null) {\n        throw new Error(\"Missing the required parameter 'username' when calling searchCustomFoods\");\n      }\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling searchCustomFoods\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'username': username,\n        'hash': hash,\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/customFoods/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchFoodVideos operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchFoodVideosCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Food Videos\n     * Find recipe and other food related videos.\n     * @param {String} query The search query.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.type The type of the recipes. See a full list of supported meal types.\n     * @param {String} opts.cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.\n     * @param {String} opts.diet The diet for which the recipes must be suitable. See a full list of supported diets.\n     * @param {String} opts.includeIngredients A comma-separated list of ingredients that the recipes should contain.\n     * @param {String} opts.excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.\n     * @param {Number} opts.minLength Minimum video length in seconds.\n     * @param {Number} opts.maxLength Maximum video length in seconds.\n     * @param {Number} opts.offset The number of results to skip (between 0 and 900).\n     * @param {Number} opts._number The number of results to return (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchFoodVideosCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchFoodVideos(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchFoodVideos\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'type': opts['type'],\n        'cuisine': opts['cuisine'],\n        'diet': opts['diet'],\n        'includeIngredients': opts['includeIngredients'],\n        'excludeIngredients': opts['excludeIngredients'],\n        'minLength': opts['minLength'],\n        'maxLength': opts['maxLength'],\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/videos/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchGroceryProducts operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Grocery Products\n     * Search packaged food products, such as frozen pizza or Greek yogurt.\n     * @param {String} query The search query.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.minCalories The minimum amount of calories the product must have.\n     * @param {Number} opts.maxCalories The maximum amount of calories the product can have.\n     * @param {Number} opts.minCarbs The minimum amount of carbohydrates in grams the product must have.\n     * @param {Number} opts.maxCarbs The maximum amount of carbohydrates in grams the product can have.\n     * @param {Number} opts.minProtein The minimum amount of protein in grams the product must have.\n     * @param {Number} opts.maxProtein The maximum amount of protein in grams the product can have.\n     * @param {Number} opts.minFat The minimum amount of fat in grams the product must have.\n     * @param {Number} opts.maxFat The maximum amount of fat in grams the product can have.\n     * @param {Number} opts.offset The number of results to skip (between 0 and 990).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchGroceryProducts(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchGroceryProducts\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'minCalories': opts['minCalories'],\n        'maxCalories': opts['maxCalories'],\n        'minCarbs': opts['minCarbs'],\n        'maxCarbs': opts['maxCarbs'],\n        'minProtein': opts['minProtein'],\n        'maxProtein': opts['maxProtein'],\n        'minFat': opts['minFat'],\n        'maxFat': opts['maxFat'],\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchGroceryProductsByUPC operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsByUPCCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Grocery Products by UPC\n     * Get information about a packaged food using its UPC.\n     * @param {Number} upc The product's UPC.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsByUPCCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchGroceryProductsByUPC(upc, callback) {\n      let postBody = null;\n      // verify the required parameter 'upc' is set\n      if (upc === undefined || upc === null) {\n        throw new Error(\"Missing the required parameter 'upc' when calling searchGroceryProductsByUPC\");\n      }\n\n      let pathParams = {\n        'upc': upc\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/products/upc/{upc}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchMenuItems operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchMenuItemsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Menu Items\n     * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.\n     * @param {String} query The search query.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.minCalories The minimum amount of calories the menu item must have.\n     * @param {Number} opts.maxCalories The maximum amount of calories the menu item can have.\n     * @param {Number} opts.minCarbs The minimum amount of carbohydrates in grams the menu item must have.\n     * @param {Number} opts.maxCarbs The maximum amount of carbohydrates in grams the menu item can have.\n     * @param {Number} opts.minProtein The minimum amount of protein in grams the menu item must have.\n     * @param {Number} opts.maxProtein The maximum amount of protein in grams the menu item can have.\n     * @param {Number} opts.minFat The minimum amount of fat in grams the menu item must have.\n     * @param {Number} opts.maxFat The maximum amount of fat in grams the menu item can have.\n     * @param {Number} opts.offset The offset number for paging (between 0 and 990).\n     * @param {Number} opts._number The number of expected results (between 1 and 10).\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchMenuItemsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchMenuItems(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchMenuItems\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'minCalories': opts['minCalories'],\n        'maxCalories': opts['maxCalories'],\n        'minCarbs': opts['minCarbs'],\n        'maxCarbs': opts['maxCarbs'],\n        'minProtein': opts['minProtein'],\n        'maxProtein': opts['maxProtein'],\n        'minFat': opts['minFat'],\n        'maxFat': opts['maxFat'],\n        'offset': opts['offset'],\n        'number': opts['_number']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/menuItems/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchRecipes operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Recipes\n     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.\n     * @param {String} query The (natural language) recipe search query.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.\n     * @param {String} opts.excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.\n     * @param {String} opts.diet The diet for which the recipes must be suitable. See a full list of supported diets.\n     * @param {String} opts.intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n     * @param {String} opts.equipment The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \\\"blender, frying pan, bowl\\\".\n     * @param {String} opts.includeIngredients A comma-separated list of ingredients that should/must be used in the recipes.\n     * @param {String} opts.excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.\n     * @param {String} opts.type The type of recipe. See a full list of supported meal types.\n     * @param {Boolean} opts.instructionsRequired Whether the recipes must have instructions.\n     * @param {Boolean} opts.fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query.\n     * @param {Boolean} opts.addRecipeInformation If set to true, you get more information about the recipes returned.\n     * @param {Boolean} opts.addRecipeNutrition If set to true, you get nutritional information about each recipes returned.\n     * @param {String} opts.author The username of the recipe author.\n     * @param {String} opts.tags User defined tags that have to match. The author param has to be set.\n     * @param {Number} opts.recipeBoxId The id of the recipe box to which the search should be limited to.\n     * @param {String} opts.titleMatch Enter text that must be found in the title of the recipes.\n     * @param {Number} opts.maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe.\n     * @param {Boolean} opts.ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.\n     * @param {String} opts.sort The strategy to sort recipes by. See a full list of supported sorting options.\n     * @param {String} opts.sortDirection The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).\n     * @param {Number} opts.minCarbs The minimum amount of carbohydrates in grams the recipe must have.\n     * @param {Number} opts.maxCarbs The maximum amount of carbohydrates in grams the recipe can have.\n     * @param {Number} opts.minProtein The minimum amount of protein in grams the recipe must have.\n     * @param {Number} opts.maxProtein The maximum amount of protein in grams the recipe can have.\n     * @param {Number} opts.minCalories The minimum amount of calories the recipe must have.\n     * @param {Number} opts.maxCalories The maximum amount of calories the recipe can have.\n     * @param {Number} opts.minFat The minimum amount of fat in grams the recipe must have.\n     * @param {Number} opts.maxFat The maximum amount of fat in grams the recipe can have.\n     * @param {Number} opts.minAlcohol The minimum amount of alcohol in grams the recipe must have.\n     * @param {Number} opts.maxAlcohol The maximum amount of alcohol in grams the recipe can have.\n     * @param {Number} opts.minCaffeine The minimum amount of caffeine in milligrams the recipe must have.\n     * @param {Number} opts.maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.\n     * @param {Number} opts.minCopper The minimum amount of copper in milligrams the recipe must have.\n     * @param {Number} opts.maxCopper The maximum amount of copper in milligrams the recipe can have.\n     * @param {Number} opts.minCalcium The minimum amount of calcium in milligrams the recipe must have.\n     * @param {Number} opts.maxCalcium The maximum amount of calcium in milligrams the recipe can have.\n     * @param {Number} opts.minCholine The minimum amount of choline in milligrams the recipe must have.\n     * @param {Number} opts.maxCholine The maximum amount of choline in milligrams the recipe can have.\n     * @param {Number} opts.minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.\n     * @param {Number} opts.maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.\n     * @param {Number} opts.minFluoride The minimum amount of fluoride in milligrams the recipe must have.\n     * @param {Number} opts.maxFluoride The maximum amount of fluoride in milligrams the recipe can have.\n     * @param {Number} opts.minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.\n     * @param {Number} opts.maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.\n     * @param {Number} opts.minVitaminA The minimum amount of Vitamin A in IU the recipe must have.\n     * @param {Number} opts.maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.\n     * @param {Number} opts.minVitaminC The minimum amount of Vitamin C milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.\n     * @param {Number} opts.minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.\n     * @param {Number} opts.minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.\n     * @param {Number} opts.minFiber The minimum amount of fiber in grams the recipe must have.\n     * @param {Number} opts.maxFiber The maximum amount of fiber in grams the recipe can have.\n     * @param {Number} opts.minFolate The minimum amount of folate in micrograms the recipe must have.\n     * @param {Number} opts.maxFolate The maximum amount of folate in micrograms the recipe can have.\n     * @param {Number} opts.minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.\n     * @param {Number} opts.maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.\n     * @param {Number} opts.minIodine The minimum amount of iodine in micrograms the recipe must have.\n     * @param {Number} opts.maxIodine The maximum amount of iodine in micrograms the recipe can have.\n     * @param {Number} opts.minIron The minimum amount of iron in milligrams the recipe must have.\n     * @param {Number} opts.maxIron The maximum amount of iron in milligrams the recipe can have.\n     * @param {Number} opts.minMagnesium The minimum amount of magnesium in milligrams the recipe must have.\n     * @param {Number} opts.maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.\n     * @param {Number} opts.minManganese The minimum amount of manganese in milligrams the recipe must have.\n     * @param {Number} opts.maxManganese The maximum amount of manganese in milligrams the recipe can have.\n     * @param {Number} opts.minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.\n     * @param {Number} opts.maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.\n     * @param {Number} opts.minPotassium The minimum amount of potassium in milligrams the recipe must have.\n     * @param {Number} opts.maxPotassium The maximum amount of potassium in milligrams the recipe can have.\n     * @param {Number} opts.minSelenium The minimum amount of selenium in micrograms the recipe must have.\n     * @param {Number} opts.maxSelenium The maximum amount of selenium in micrograms the recipe can have.\n     * @param {Number} opts.minSodium The minimum amount of sodium in milligrams the recipe must have.\n     * @param {Number} opts.maxSodium The maximum amount of sodium in milligrams the recipe can have.\n     * @param {Number} opts.minSugar The minimum amount of sugar in grams the recipe must have.\n     * @param {Number} opts.maxSugar The maximum amount of sugar in grams the recipe can have.\n     * @param {Number} opts.minZinc The minimum amount of zinc in milligrams the recipe must have.\n     * @param {Number} opts.maxZinc The maximum amount of zinc in milligrams the recipe can have.\n     * @param {Number} opts.offset The number of results to skip (between 0 and 900).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows display with proper attribution.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchRecipes(query, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchRecipes\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query,\n        'cuisine': opts['cuisine'],\n        'excludeCuisine': opts['excludeCuisine'],\n        'diet': opts['diet'],\n        'intolerances': opts['intolerances'],\n        'equipment': opts['equipment'],\n        'includeIngredients': opts['includeIngredients'],\n        'excludeIngredients': opts['excludeIngredients'],\n        'type': opts['type'],\n        'instructionsRequired': opts['instructionsRequired'],\n        'fillIngredients': opts['fillIngredients'],\n        'addRecipeInformation': opts['addRecipeInformation'],\n        'addRecipeNutrition': opts['addRecipeNutrition'],\n        'author': opts['author'],\n        'tags': opts['tags'],\n        'recipeBoxId': opts['recipeBoxId'],\n        'titleMatch': opts['titleMatch'],\n        'maxReadyTime': opts['maxReadyTime'],\n        'ignorePantry': opts['ignorePantry'],\n        'sort': opts['sort'],\n        'sortDirection': opts['sortDirection'],\n        'minCarbs': opts['minCarbs'],\n        'maxCarbs': opts['maxCarbs'],\n        'minProtein': opts['minProtein'],\n        'maxProtein': opts['maxProtein'],\n        'minCalories': opts['minCalories'],\n        'maxCalories': opts['maxCalories'],\n        'minFat': opts['minFat'],\n        'maxFat': opts['maxFat'],\n        'minAlcohol': opts['minAlcohol'],\n        'maxAlcohol': opts['maxAlcohol'],\n        'minCaffeine': opts['minCaffeine'],\n        'maxCaffeine': opts['maxCaffeine'],\n        'minCopper': opts['minCopper'],\n        'maxCopper': opts['maxCopper'],\n        'minCalcium': opts['minCalcium'],\n        'maxCalcium': opts['maxCalcium'],\n        'minCholine': opts['minCholine'],\n        'maxCholine': opts['maxCholine'],\n        'minCholesterol': opts['minCholesterol'],\n        'maxCholesterol': opts['maxCholesterol'],\n        'minFluoride': opts['minFluoride'],\n        'maxFluoride': opts['maxFluoride'],\n        'minSaturatedFat': opts['minSaturatedFat'],\n        'maxSaturatedFat': opts['maxSaturatedFat'],\n        'minVitaminA': opts['minVitaminA'],\n        'maxVitaminA': opts['maxVitaminA'],\n        'minVitaminC': opts['minVitaminC'],\n        'maxVitaminC': opts['maxVitaminC'],\n        'minVitaminD': opts['minVitaminD'],\n        'maxVitaminD': opts['maxVitaminD'],\n        'minVitaminE': opts['minVitaminE'],\n        'maxVitaminE': opts['maxVitaminE'],\n        'minVitaminK': opts['minVitaminK'],\n        'maxVitaminK': opts['maxVitaminK'],\n        'minVitaminB1': opts['minVitaminB1'],\n        'maxVitaminB1': opts['maxVitaminB1'],\n        'minVitaminB2': opts['minVitaminB2'],\n        'maxVitaminB2': opts['maxVitaminB2'],\n        'minVitaminB5': opts['minVitaminB5'],\n        'maxVitaminB5': opts['maxVitaminB5'],\n        'minVitaminB3': opts['minVitaminB3'],\n        'maxVitaminB3': opts['maxVitaminB3'],\n        'minVitaminB6': opts['minVitaminB6'],\n        'maxVitaminB6': opts['maxVitaminB6'],\n        'minVitaminB12': opts['minVitaminB12'],\n        'maxVitaminB12': opts['maxVitaminB12'],\n        'minFiber': opts['minFiber'],\n        'maxFiber': opts['maxFiber'],\n        'minFolate': opts['minFolate'],\n        'maxFolate': opts['maxFolate'],\n        'minFolicAcid': opts['minFolicAcid'],\n        'maxFolicAcid': opts['maxFolicAcid'],\n        'minIodine': opts['minIodine'],\n        'maxIodine': opts['maxIodine'],\n        'minIron': opts['minIron'],\n        'maxIron': opts['maxIron'],\n        'minMagnesium': opts['minMagnesium'],\n        'maxMagnesium': opts['maxMagnesium'],\n        'minManganese': opts['minManganese'],\n        'maxManganese': opts['maxManganese'],\n        'minPhosphorus': opts['minPhosphorus'],\n        'maxPhosphorus': opts['maxPhosphorus'],\n        'minPotassium': opts['minPotassium'],\n        'maxPotassium': opts['maxPotassium'],\n        'minSelenium': opts['minSelenium'],\n        'maxSelenium': opts['maxSelenium'],\n        'minSodium': opts['minSodium'],\n        'maxSodium': opts['maxSodium'],\n        'minSugar': opts['minSugar'],\n        'maxSugar': opts['maxSugar'],\n        'minZinc': opts['minZinc'],\n        'maxZinc': opts['maxZinc'],\n        'offset': opts['offset'],\n        'number': opts['_number'],\n        'limitLicense': opts['limitLicense']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/complexSearch', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchRecipesByIngredients operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByIngredientsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Recipes by Ingredients\n     *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         \n     * @param {String} ingredients A comma-separated list of ingredients that the recipes should contain.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts._number The maximum number of recipes to return (between 1 and 100). Defaults to 10.\n     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows display with proper attribution.\n     * @param {Number} opts.ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.\n     * @param {Boolean} opts.ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByIngredientsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchRecipesByIngredients(ingredients, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ingredients' is set\n      if (ingredients === undefined || ingredients === null) {\n        throw new Error(\"Missing the required parameter 'ingredients' when calling searchRecipesByIngredients\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'ingredients': ingredients,\n        'number': opts['_number'],\n        'limitLicense': opts['limitLicense'],\n        'ranking': opts['ranking'],\n        'ignorePantry': opts['ignorePantry']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/findByIngredients', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchRecipesByNutrients operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByNutrientsCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Recipes by Nutrients\n     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.minCarbs The minimum amount of carbohydrates in grams the recipe must have.\n     * @param {Number} opts.maxCarbs The maximum amount of carbohydrates in grams the recipe can have.\n     * @param {Number} opts.minProtein The minimum amount of protein in grams the recipe must have.\n     * @param {Number} opts.maxProtein The maximum amount of protein in grams the recipe can have.\n     * @param {Number} opts.minCalories The minimum amount of calories the recipe must have.\n     * @param {Number} opts.maxCalories The maximum amount of calories the recipe can have.\n     * @param {Number} opts.minFat The minimum amount of fat in grams the recipe must have.\n     * @param {Number} opts.maxFat The maximum amount of fat in grams the recipe can have.\n     * @param {Number} opts.minAlcohol The minimum amount of alcohol in grams the recipe must have.\n     * @param {Number} opts.maxAlcohol The maximum amount of alcohol in grams the recipe can have.\n     * @param {Number} opts.minCaffeine The minimum amount of caffeine in milligrams the recipe must have.\n     * @param {Number} opts.maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.\n     * @param {Number} opts.minCopper The minimum amount of copper in milligrams the recipe must have.\n     * @param {Number} opts.maxCopper The maximum amount of copper in milligrams the recipe can have.\n     * @param {Number} opts.minCalcium The minimum amount of calcium in milligrams the recipe must have.\n     * @param {Number} opts.maxCalcium The maximum amount of calcium in milligrams the recipe can have.\n     * @param {Number} opts.minCholine The minimum amount of choline in milligrams the recipe must have.\n     * @param {Number} opts.maxCholine The maximum amount of choline in milligrams the recipe can have.\n     * @param {Number} opts.minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.\n     * @param {Number} opts.maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.\n     * @param {Number} opts.minFluoride The minimum amount of fluoride in milligrams the recipe must have.\n     * @param {Number} opts.maxFluoride The maximum amount of fluoride in milligrams the recipe can have.\n     * @param {Number} opts.minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.\n     * @param {Number} opts.maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.\n     * @param {Number} opts.minVitaminA The minimum amount of Vitamin A in IU the recipe must have.\n     * @param {Number} opts.maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.\n     * @param {Number} opts.minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.\n     * @param {Number} opts.minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.\n     * @param {Number} opts.minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.\n     * @param {Number} opts.maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.\n     * @param {Number} opts.minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.\n     * @param {Number} opts.maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.\n     * @param {Number} opts.minFiber The minimum amount of fiber in grams the recipe must have.\n     * @param {Number} opts.maxFiber The maximum amount of fiber in grams the recipe can have.\n     * @param {Number} opts.minFolate The minimum amount of folate in micrograms the recipe must have.\n     * @param {Number} opts.maxFolate The maximum amount of folate in micrograms the recipe can have.\n     * @param {Number} opts.minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.\n     * @param {Number} opts.maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.\n     * @param {Number} opts.minIodine The minimum amount of iodine in micrograms the recipe must have.\n     * @param {Number} opts.maxIodine The maximum amount of iodine in micrograms the recipe can have.\n     * @param {Number} opts.minIron The minimum amount of iron in milligrams the recipe must have.\n     * @param {Number} opts.maxIron The maximum amount of iron in milligrams the recipe can have.\n     * @param {Number} opts.minMagnesium The minimum amount of magnesium in milligrams the recipe must have.\n     * @param {Number} opts.maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.\n     * @param {Number} opts.minManganese The minimum amount of manganese in milligrams the recipe must have.\n     * @param {Number} opts.maxManganese The maximum amount of manganese in milligrams the recipe can have.\n     * @param {Number} opts.minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.\n     * @param {Number} opts.maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.\n     * @param {Number} opts.minPotassium The minimum amount of potassium in milligrams the recipe must have.\n     * @param {Number} opts.maxPotassium The maximum amount of potassium in milligrams the recipe can have.\n     * @param {Number} opts.minSelenium The minimum amount of selenium in micrograms the recipe must have.\n     * @param {Number} opts.maxSelenium The maximum amount of selenium in micrograms the recipe can have.\n     * @param {Number} opts.minSodium The minimum amount of sodium in milligrams the recipe must have.\n     * @param {Number} opts.maxSodium The maximum amount of sodium in milligrams the recipe can have.\n     * @param {Number} opts.minSugar The minimum amount of sugar in grams the recipe must have.\n     * @param {Number} opts.maxSugar The maximum amount of sugar in grams the recipe can have.\n     * @param {Number} opts.minZinc The minimum amount of zinc in milligrams the recipe must have.\n     * @param {Number} opts.maxZinc The maximum amount of zinc in milligrams the recipe can have.\n     * @param {Number} opts.offset The number of results to skip (between 0 and 900).\n     * @param {Number} opts._number The number of expected results (between 1 and 100).\n     * @param {Boolean} opts.random If true, every request will give you a random set of recipes within the requested limits.\n     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows display with proper attribution.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByNutrientsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchRecipesByNutrients(opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'minCarbs': opts['minCarbs'],\n        'maxCarbs': opts['maxCarbs'],\n        'minProtein': opts['minProtein'],\n        'maxProtein': opts['maxProtein'],\n        'minCalories': opts['minCalories'],\n        'maxCalories': opts['maxCalories'],\n        'minFat': opts['minFat'],\n        'maxFat': opts['maxFat'],\n        'minAlcohol': opts['minAlcohol'],\n        'maxAlcohol': opts['maxAlcohol'],\n        'minCaffeine': opts['minCaffeine'],\n        'maxCaffeine': opts['maxCaffeine'],\n        'minCopper': opts['minCopper'],\n        'maxCopper': opts['maxCopper'],\n        'minCalcium': opts['minCalcium'],\n        'maxCalcium': opts['maxCalcium'],\n        'minCholine': opts['minCholine'],\n        'maxCholine': opts['maxCholine'],\n        'minCholesterol': opts['minCholesterol'],\n        'maxCholesterol': opts['maxCholesterol'],\n        'minFluoride': opts['minFluoride'],\n        'maxFluoride': opts['maxFluoride'],\n        'minSaturatedFat': opts['minSaturatedFat'],\n        'maxSaturatedFat': opts['maxSaturatedFat'],\n        'minVitaminA': opts['minVitaminA'],\n        'maxVitaminA': opts['maxVitaminA'],\n        'minVitaminC': opts['minVitaminC'],\n        'maxVitaminC': opts['maxVitaminC'],\n        'minVitaminD': opts['minVitaminD'],\n        'maxVitaminD': opts['maxVitaminD'],\n        'minVitaminE': opts['minVitaminE'],\n        'maxVitaminE': opts['maxVitaminE'],\n        'minVitaminK': opts['minVitaminK'],\n        'maxVitaminK': opts['maxVitaminK'],\n        'minVitaminB1': opts['minVitaminB1'],\n        'maxVitaminB1': opts['maxVitaminB1'],\n        'minVitaminB2': opts['minVitaminB2'],\n        'maxVitaminB2': opts['maxVitaminB2'],\n        'minVitaminB5': opts['minVitaminB5'],\n        'maxVitaminB5': opts['maxVitaminB5'],\n        'minVitaminB3': opts['minVitaminB3'],\n        'maxVitaminB3': opts['maxVitaminB3'],\n        'minVitaminB6': opts['minVitaminB6'],\n        'maxVitaminB6': opts['maxVitaminB6'],\n        'minVitaminB12': opts['minVitaminB12'],\n        'maxVitaminB12': opts['maxVitaminB12'],\n        'minFiber': opts['minFiber'],\n        'maxFiber': opts['maxFiber'],\n        'minFolate': opts['minFolate'],\n        'maxFolate': opts['maxFolate'],\n        'minFolicAcid': opts['minFolicAcid'],\n        'maxFolicAcid': opts['maxFolicAcid'],\n        'minIodine': opts['minIodine'],\n        'maxIodine': opts['maxIodine'],\n        'minIron': opts['minIron'],\n        'maxIron': opts['maxIron'],\n        'minMagnesium': opts['minMagnesium'],\n        'maxMagnesium': opts['maxMagnesium'],\n        'minManganese': opts['minManganese'],\n        'maxManganese': opts['maxManganese'],\n        'minPhosphorus': opts['minPhosphorus'],\n        'maxPhosphorus': opts['maxPhosphorus'],\n        'minPotassium': opts['minPotassium'],\n        'maxPotassium': opts['maxPotassium'],\n        'minSelenium': opts['minSelenium'],\n        'maxSelenium': opts['maxSelenium'],\n        'minSodium': opts['minSodium'],\n        'maxSodium': opts['maxSodium'],\n        'minSugar': opts['minSugar'],\n        'maxSugar': opts['maxSugar'],\n        'minZinc': opts['minZinc'],\n        'maxZinc': opts['maxZinc'],\n        'offset': opts['offset'],\n        'number': opts['_number'],\n        'random': opts['random'],\n        'limitLicense': opts['limitLicense']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/findByNutrients', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the searchSiteContent operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchSiteContentCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Search Site Content\n     * Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.\n     * @param {String} query The query to search for. You can also use partial queries such as \\\"spagh\\\" to already find spaghetti recipes, articles, grocery products, and other content.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchSiteContentCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    searchSiteContent(query, callback) {\n      let postBody = null;\n      // verify the required parameter 'query' is set\n      if (query === undefined || query === null) {\n        throw new Error(\"Missing the required parameter 'query' when calling searchSiteContent\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'query': query\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/site/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the summarizeRecipe operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~summarizeRecipeCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Summarize Recipe\n     * Automatically generate a short description that summarizes key information about the recipe.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~summarizeRecipeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    summarizeRecipe(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling summarizeRecipe\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/recipes/{id}/summary', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the talkToChatbot operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~talkToChatbotCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Talk to Chatbot\n     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \\\"Get Conversation Suggests\\\" endpoint to show your user what he or she can say.\n     * @param {String} text The request / question / answer from the user to the chatbot.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~talkToChatbotCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n    talkToChatbot(text, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'text' is set\n      if (text === undefined || text === null) {\n        throw new Error(\"Missing the required parameter 'text' when calling talkToChatbot\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'text': text,\n        'contextId': opts['contextId']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n      return this.apiClient.callApi(\n        '/food/converse', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeEquipment operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeEquipmentCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Equipment\n     * Visualize the equipment used to make a recipe. You can play around with that endpoint!\n     * @param {String} instructions The recipe's instructions.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.view How to visualize the equipment, either \\\\\\\"grid\\\\\\\" or \\\\\\\"list\\\\\\\".\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeEquipmentCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeEquipment(instructions, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'instructions' is set\n      if (instructions === undefined || instructions === null) {\n        throw new Error(\"Missing the required parameter 'instructions' when calling visualizeEquipment\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'instructions': instructions,\n        'view': opts['view'],\n        'defaultCss': opts['defaultCss'],\n        'showBacklink': opts['showBacklink']\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/visualizeEquipment', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeIngredients operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeIngredientsCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Ingredients\n     * Visualize ingredients of a recipe. You can play around with that endpoint!\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.\n     * @param {Number} servings The number of servings.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.measure The original system of measurement, either \\\\\\\"metric\\\\\\\" or \\\\\\\"us\\\\\\\".\n     * @param {String} opts.view How to visualize the ingredients, either \\\\\\\"grid\\\\\\\" or \\\\\\\"list\\\\\\\".\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeIngredientsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeIngredients(ingredientList, servings, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling visualizeIngredients\");\n      }\n      // verify the required parameter 'servings' is set\n      if (servings === undefined || servings === null) {\n        throw new Error(\"Missing the required parameter 'servings' when calling visualizeIngredients\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'ingredientList': ingredientList,\n        'servings': servings,\n        'measure': opts['measure'],\n        'view': opts['view'],\n        'defaultCss': opts['defaultCss'],\n        'showBacklink': opts['showBacklink']\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/visualizeIngredients', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeMenuItemNutritionByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeMenuItemNutritionByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Menu Item Nutrition by ID\n     * Visualize a menu item's nutritional information as HTML including CSS.\n     * @param {Number} id The menu item id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeMenuItemNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeMenuItemNutritionByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeMenuItemNutritionByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/food/menuItems/{id}/nutritionWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizePriceBreakdown operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizePriceBreakdownCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Price Breakdown\n     * Visualize the price breakdown of a recipe. You can play around with that endpoint!\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.\n     * @param {Number} servings The number of servings.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.mode The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizePriceBreakdownCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizePriceBreakdown(ingredientList, servings, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling visualizePriceBreakdown\");\n      }\n      // verify the required parameter 'servings' is set\n      if (servings === undefined || servings === null) {\n        throw new Error(\"Missing the required parameter 'servings' when calling visualizePriceBreakdown\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'ingredientList': ingredientList,\n        'servings': servings,\n        'mode': opts['mode'],\n        'defaultCss': opts['defaultCss'],\n        'showBacklink': opts['showBacklink']\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/visualizePriceEstimator', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeProductNutritionByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeProductNutritionByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Product Nutrition by ID\n     * Visualize a product's nutritional information as HTML including CSS.\n     * @param {Number} id The id of the product.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeProductNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeProductNutritionByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeProductNutritionByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/food/products/{id}/nutritionWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeEquipmentByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeEquipmentByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Equipment by ID\n     * Visualize a recipe's equipment list.\n     * @param {Number} id The recipe id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeEquipmentByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/{id}/equipmentWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeIngredientsByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeIngredientsByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Ingredients by ID\n     * Visualize a recipe's ingredient list.\n     * @param {Number} id The recipe id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeIngredientsByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/{id}/ingredientWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeNutrition operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Nutrition\n     * Visualize a recipe's nutritional information as HTML including CSS. You can play around with that endpoint!\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.\n     * @param {Number} servings The number of servings.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeNutrition(ingredientList, servings, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling visualizeRecipeNutrition\");\n      }\n      // verify the required parameter 'servings' is set\n      if (servings === undefined || servings === null) {\n        throw new Error(\"Missing the required parameter 'servings' when calling visualizeRecipeNutrition\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'ingredientList': ingredientList,\n        'servings': servings,\n        'defaultCss': opts['defaultCss'],\n        'showBacklink': opts['showBacklink']\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/visualizeNutrition', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeNutritionByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Nutrition by ID\n     * Visualize a recipe's nutritional information as HTML including CSS.\n     * @param {Number} id The recipe id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeNutritionByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeRecipeNutritionByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/{id}/nutritionWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipePriceBreakdownByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipePriceBreakdownByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Price Breakdown by ID\n     * Visualize a recipe's price breakdown.\n     * @param {Number} id The recipe id.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipePriceBreakdownByID(id, opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n        'defaultCss': opts['defaultCss']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/{id}/priceBreakdownWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeTaste operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeTasteCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Taste\n     * Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!\n     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeTasteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeTaste(ingredientList, callback) {\n      let postBody = null;\n      // verify the required parameter 'ingredientList' is set\n      if (ingredientList === undefined || ingredientList === null) {\n        throw new Error(\"Missing the required parameter 'ingredientList' when calling visualizeRecipeTaste\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n        'ingredientList': ingredientList\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/x-www-form-urlencoded'];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/visualizeTaste', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the visualizeRecipeTasteByID operation.\n     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeTasteByIDCallback\n     * @param {String} error Error message, if any.\n     * @param {String} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Visualize Recipe Taste by ID\n     * Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.\n     * @param {Number} id The recipe id.\n     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeTasteByIDCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link String}\n     */\n    visualizeRecipeTasteByID(id, callback) {\n      let postBody = null;\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling visualizeRecipeTasteByID\");\n      }\n\n      let pathParams = {\n        'id': id\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['text/html'];\n      let returnType = 'String';\n      return this.apiClient.callApi(\n        '/recipes/{id}/tasteWidget', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null, callback\n      );\n    }\n\n\n}\n","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject13.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject11.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject14.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject10.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject12.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject9.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject15.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Main\\Main.tsx",["90","91","92","93","94"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\App.tsx",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Stores\\FoodStore.ts",["95"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\Page\\Page.tsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"96","replacedBy":"100"},{"ruleId":"98","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":103,"column":19,"nodeType":"104","messageId":"105","endLine":103,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":225,"column":59,"nodeType":"104","messageId":"105","endLine":225,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":325,"column":71,"nodeType":"104","messageId":"105","endLine":325,"endColumn":73},{"ruleId":"102","severity":1,"message":"106","line":406,"column":28,"nodeType":"104","messageId":"105","endLine":406,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":415,"column":32,"nodeType":"104","messageId":"105","endLine":415,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":533,"column":30,"nodeType":"109","messageId":"110","endLine":533,"endColumn":31},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"111","severity":1,"message":"112","line":16,"column":8,"nodeType":"109","messageId":"113","endLine":16,"endColumn":22},{"ruleId":"111","severity":1,"message":"114","line":17,"column":8,"nodeType":"109","messageId":"113","endLine":17,"endColumn":22},{"ruleId":"111","severity":1,"message":"115","line":18,"column":8,"nodeType":"109","messageId":"113","endLine":18,"endColumn":22},{"ruleId":"111","severity":1,"message":"116","line":19,"column":8,"nodeType":"109","messageId":"113","endLine":19,"endColumn":22},{"ruleId":"111","severity":1,"message":"117","line":20,"column":8,"nodeType":"109","messageId":"113","endLine":20,"endColumn":22},{"ruleId":"111","severity":1,"message":"118","line":21,"column":8,"nodeType":"109","messageId":"113","endLine":21,"endColumn":22},{"ruleId":"111","severity":1,"message":"119","line":22,"column":8,"nodeType":"109","messageId":"113","endLine":22,"endColumn":21},{"ruleId":"120","severity":1,"message":"121","line":4,"column":8,"nodeType":"109","messageId":"113","endLine":4,"endColumn":12},{"ruleId":"120","severity":1,"message":"122","line":8,"column":8,"nodeType":"109","messageId":"113","endLine":8,"endColumn":20},{"ruleId":"120","severity":1,"message":"123","line":9,"column":8,"nodeType":"109","messageId":"113","endLine":9,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":10,"column":8,"nodeType":"109","messageId":"113","endLine":10,"endColumn":22},{"ruleId":"120","severity":1,"message":"125","line":13,"column":8,"nodeType":"109","messageId":"113","endLine":13,"endColumn":20},{"ruleId":"120","severity":1,"message":"126","line":1,"column":9,"nodeType":"109","messageId":"113","endLine":1,"endColumn":19},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'k' is already defined.","Identifier","redeclared","no-unused-vars","'InlineObject10' is defined but never used.","unusedVar","'InlineObject11' is defined but never used.","'InlineObject12' is defined but never used.","'InlineObject13' is defined but never used.","'InlineObject14' is defined but never used.","'InlineObject15' is defined but never used.","'InlineObject9' is defined but never used.","@typescript-eslint/no-unused-vars","'Food' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownButton' is defined but never used.","'DropdownItem' is defined but never used.","'observable' is defined but never used.","no-global-assign","no-unsafe-negation"]