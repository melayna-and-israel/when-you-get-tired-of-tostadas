[{"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\index.tsx":"1","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\reportWebVitals.ts":"2","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Food\\Food.tsx":"3","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\ApiClient.js":"4","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular\\DefaultApi.js":"5","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject13.js":"6","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject11.js":"7","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject14.js":"8","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject10.js":"9","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject12.js":"10","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject9.js":"11","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject15.js":"12","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Main\\Main.tsx":"13","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\App.tsx":"14","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Stores\\FoodStore.ts":"15","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\Page\\Page.tsx":"16","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\RecipeCard\\RecipeCard.tsx":"17","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\RecipeCards\\RecipeCards.tsx":"18"},{"size":498,"mtime":1607143250734,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":690,"mtime":1606981677146,"results":"22","hashOfConfig":"20"},{"size":24297,"mtime":1608088407539,"results":"23","hashOfConfig":"20"},{"size":194564,"mtime":1608163392279,"results":"24","hashOfConfig":"20"},{"size":4381,"mtime":1608163089296,"results":"25","hashOfConfig":"20"},{"size":3527,"mtime":1608163089030,"results":"26","hashOfConfig":"20"},{"size":3527,"mtime":1608163089431,"results":"27","hashOfConfig":"20"},{"size":3899,"mtime":1608163088875,"results":"28","hashOfConfig":"20"},{"size":3856,"mtime":1608163089146,"results":"29","hashOfConfig":"20"},{"size":3131,"mtime":1608163088768,"results":"30","hashOfConfig":"20"},{"size":3856,"mtime":1608163089574,"results":"31","hashOfConfig":"20"},{"size":8214,"mtime":1608111901407,"results":"32","hashOfConfig":"20"},{"size":1418,"mtime":1608111207911,"results":"33","hashOfConfig":"20"},{"size":1070,"mtime":1608164048909,"results":"34","hashOfConfig":"20"},{"size":9461,"mtime":1608171366500,"results":"35","hashOfConfig":"20"},{"size":775,"mtime":1608172095519,"results":"36","hashOfConfig":"20"},{"size":1642,"mtime":1608172083011,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1l6yn9u",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\index.tsx",[],["79","80"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\reportWebVitals.ts",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Food\\Food.tsx",[],["81","82"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\ApiClient.js",["83","84","85","86","87","88"],"/**\n * spoonacular API\n * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \\\"gluten free brownies without sugar\\\" or \\\"low fat vegan cupcakes.\\\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.\n *\n * The version of the OpenAPI document: 1.0\n * Contact: david@spoonacular.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n\n/**\n* @module com.spoonacular.client/ApiClient\n* @version 1.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:com.spoonacular.client/ApiClient\n* @class\n*/\nclass ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://api.spoonacular.com\n         */\n        this.basePath = 'https://api.spoonacular.com'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n            'apiKeyScheme': {type: 'apiKey', 'in': 'query', name: 'apiKey', apiKey: process.env.REACT_APP_API_KEY}\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:com.spoonacular.client/ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n   /**\n    * Callback function to receive the result of the operation.\n    * @callback module:com.spoonacular.client/ApiClient~callApiCallback\n    * @param {String} error Error message, if any.\n    * @param data The data returned by the service call.\n    * @param {String} response The complete HTTP response.\n    */\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one \n    * @param {module:com.spoonacular.client/ApiClient~callApiCallback} callback The callback function.\n    * @returns {Object} The SuperAgent request object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath, callback) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        \n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n        request.end((error, response) => {\n            if (callback) {\n                var data = null;\n                if (!error) {\n                    try {\n                        data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n                    } catch (err) {\n                        error = err;\n                    }\n                }\n\n                callback(error, data, response);\n            }\n        });\n        console.log(request);\n        return request;\n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"https://api.spoonacular.com\",\n              'description': \"No description provided\",\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                let variable = server['variables'][variable_name];\n                if ( !('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name]) ) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:com.spoonacular.client/ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n",["89","90"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular\\DefaultApi.js",["91","92","93","94","95","96","97"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject13.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject11.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject14.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject10.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject12.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject9.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Services\\com.spoonacular.client.model\\InlineObject15.js",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Main\\Main.tsx",["98","99"],"import React from 'react'\r\nimport './main.sass';\r\nimport FoodStore from '../../Stores/FoodStore'\r\n// import Food from '../Food/Food';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n// import DropdownMenu from 'react-bootstrap/Button';\r\n// import DropdownToggle from 'react-bootstrap/Button';\r\n// import DropdownButton from 'react-bootstrap/Button';\r\n\r\n\r\nimport DropdownItem from 'react-bootstrap/Button';\r\ninterface IState {\r\n    dietType: string;\r\n    intolerances:string[];\r\n    dislikes:string;\r\n  }\r\n\r\n\r\ntype PageProps = {\r\n    foodStore: FoodStore;\r\n}\r\n\r\n// const TITLE = \"Build Diet Profile\"\r\n\r\nclass Main extends React.Component<PageProps, IState>{\r\n    foodStore:FoodStore;\r\n    // textInput:React.RefObject<HTMLInputElement>;\r\n    textInput:any;\r\n\r\n    constructor(props: PageProps){\r\n        super(props);\r\n        this.foodStore = props.foodStore;\r\n        this.state={\r\n            dietType : this.foodStore.dietType,\r\n            intolerances:[],\r\n            dislikes: \"\"\r\n        }\r\n        this.textInput = React.createRef(); \r\n    }\r\n    componentDidMount(){\r\n        document.title = \"Build Diet Profile\"\r\n      }\r\n\r\n    // componentDidUpdate(prevPops: PageProps) {\r\n       \r\n    // }\r\n\r\n    renderDietPreference (){\r\n        return(\r\n            <p>Diet Preference: {this.state.dietType}</p>\r\n        )              \r\n      }\r\n\r\n\r\n    \r\n    render(){\r\n        const handleSelect=(e:any)=>{\r\n            console.log(e);\r\n            this.setState({\r\n                dietType:e\r\n            }) \r\n          }\r\n\r\n        const editDislikes = (event:any)=>{\r\n            this.setState({\r\n                dislikes:this.textInput.current.value\r\n            })\r\n        }\r\n        const editIntolerances=(event:any)=>{\r\n            let intolerances = this.state.intolerances;\r\n            if (this.state.intolerances.includes(event.target.id)){\r\n                let index = this.state.intolerances.indexOf(event.target.id);\r\n                intolerances.splice(index, 1);\r\n                console.log(\"in the list and taking it out\");\r\n                \r\n            }\r\n            else{\r\n                \r\n                intolerances.push(event.target.id);\r\n            }\r\n            console.log(intolerances);\r\n            this.setState({\r\n                intolerances:intolerances\r\n            })\r\n        }\r\n\r\n        \r\n        const saveData = ()=>{\r\n            this.foodStore.updateDietType(this.state.dietType);\r\n            console.log(this.foodStore.dietType);\r\n            this.foodStore.updateIntolerances(this.state.intolerances);\r\n            this.foodStore.updateDislikes(this.textInput.current.value);\r\n            \r\n        }\r\n\r\n        return(\r\n            \r\n            <div>\r\n                <Container>\r\n                <Row className=\"justify-content-md-center mainTitle\">\r\n                    <p>Build Your Diet Profile</p>\r\n                </Row>\r\n                \r\n                <Dropdown onSelect={handleSelect} >\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                        Diet Preference\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu >\r\n                        <Dropdown.Item eventKey=\"Vegan\">Vegan</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"Vegetarian\">Vegetarian</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"Pescatarian\">Pescatarian</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"Gluten Free\">Gluten Free</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"Ketogenic\">Ketogenic</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <div>\r\n                    {this.renderDietPreference()}\r\n                </div>\r\n\r\n                <Form>\r\n                <Form.Group>\r\n                <Form.Label>Select any intolerances:</Form.Label>\r\n                <Row> \r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"dairy\"\r\n                        label=\"dairy\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                   \r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"egg\"\r\n                        label=\"egg\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                   \r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"gluten\"\r\n                        label=\"gluten\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                   \r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"grain\"\r\n                        label=\"grain\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"peanut\"\r\n                        label=\"peanut\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"seafood\"\r\n                        label=\"seafood\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                </Row>\r\n                <Row>\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"sesame\"\r\n                        label=\"sesame\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"shellfish\"\r\n                        label=\"shellfish\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"soy\"\r\n                        label=\"soy\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"sulfite\"\r\n                        label=\"sulfite\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"tree nut\"\r\n                        label=\"tree nut\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                    <Form.Check inline\r\n                        type=\"checkbox\"\r\n                        id=\"wheat\"\r\n                        label=\"wheat\"\r\n                        // checked={this.state.peanuts}\r\n                        onChange={editIntolerances} />\r\n                </Row>\r\n                    \r\n                    <Form.Label>What ingredients do you not like?</Form.Label>\r\n                    <Form.Control type=\"ingredients\" placeholder=\"Enter ingredients separated by commas\" onChange={editDislikes} ref ={this.textInput} />\r\n                    <Form.Text className=\"text-muted\">\r\n                     Ex: mushrooms, olives, etc.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                \r\n                </Form>\r\n               \r\n                <div>\r\n                    <button onClick = {saveData}>Save</button>\r\n                </div>\r\n\r\n                </Container>\r\n                \r\n                    \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\App.tsx",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Stores\\FoodStore.ts",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\Page\\Page.tsx",["100"],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\RecipeCard\\RecipeCard.tsx",[],"C:\\Users\\israeljimenez\\inf 133\\when-you-get-tired-of-tostadas\\src\\Components\\Recipes\\RecipeCards\\RecipeCards.tsx",["101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":103,"column":19,"nodeType":"110","messageId":"111","endLine":103,"endColumn":21},{"ruleId":"108","severity":1,"message":"112","line":225,"column":59,"nodeType":"110","messageId":"111","endLine":225,"endColumn":61},{"ruleId":"108","severity":1,"message":"109","line":325,"column":71,"nodeType":"110","messageId":"111","endLine":325,"endColumn":73},{"ruleId":"108","severity":1,"message":"112","line":406,"column":28,"nodeType":"110","messageId":"111","endLine":406,"endColumn":30},{"ruleId":"108","severity":1,"message":"109","line":415,"column":32,"nodeType":"110","messageId":"111","endLine":415,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":533,"column":30,"nodeType":"115","messageId":"116","endLine":533,"endColumn":31},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"117","severity":1,"message":"118","line":16,"column":8,"nodeType":"115","messageId":"119","endLine":16,"endColumn":22},{"ruleId":"117","severity":1,"message":"120","line":17,"column":8,"nodeType":"115","messageId":"119","endLine":17,"endColumn":22},{"ruleId":"117","severity":1,"message":"121","line":18,"column":8,"nodeType":"115","messageId":"119","endLine":18,"endColumn":22},{"ruleId":"117","severity":1,"message":"122","line":19,"column":8,"nodeType":"115","messageId":"119","endLine":19,"endColumn":22},{"ruleId":"117","severity":1,"message":"123","line":20,"column":8,"nodeType":"115","messageId":"119","endLine":20,"endColumn":22},{"ruleId":"117","severity":1,"message":"124","line":21,"column":8,"nodeType":"115","messageId":"119","endLine":21,"endColumn":22},{"ruleId":"117","severity":1,"message":"125","line":22,"column":8,"nodeType":"115","messageId":"119","endLine":22,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":9,"column":8,"nodeType":"115","messageId":"119","endLine":9,"endColumn":11},{"ruleId":"126","severity":1,"message":"128","line":17,"column":8,"nodeType":"115","messageId":"119","endLine":17,"endColumn":20},{"ruleId":"126","severity":1,"message":"129","line":2,"column":8,"nodeType":"115","messageId":"119","endLine":2,"endColumn":14},{"ruleId":"126","severity":1,"message":"130","line":3,"column":8,"nodeType":"115","messageId":"119","endLine":3,"endColumn":17},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],["131"],["132"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'k' is already defined.","Identifier","redeclared","no-unused-vars","'InlineObject10' is defined but never used.","unusedVar","'InlineObject11' is defined but never used.","'InlineObject12' is defined but never used.","'InlineObject13' is defined but never used.","'InlineObject14' is defined but never used.","'InlineObject15' is defined but never used.","'InlineObject9' is defined but never used.","@typescript-eslint/no-unused-vars","'Col' is defined but never used.","'DropdownItem' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]